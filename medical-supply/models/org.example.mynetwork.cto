/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Write your model definitions here
 */

namespace org.example.mynetwork


/**
 * The status of a shipment
 */
enum ShipmentStatus {
  o CREATED
  o IN_TRANSIT
  o ARRIVED
}

/**
 * A concept for a simple street address
 */
 /*
concept Address {
  o String city optional
  o String country
  o String street optional
  o String zip optional
}
*/

abstract participant Business identified by email {
  o String email
  o String address
  o Double accountBalance
}

/**
 * A Supplier is a type of participant in the network
 */
participant Supplier extends Business {

}

/**
 * A Shipper is a type of participant in the network
 */
participant Shipper extends Business {
}


/**
 * An Manfacturer is a type of participant in the network
 */
participant Manufacturer extends Business {
}

/**
* A distributor is a type of participant in the network
*/

participant Distributor extends Business {
}

/**
 * Defines a contract between a Supplier and Manufacturer to ship using
 * a Shipper, paying a set unit price.
 */
asset Contract identified by contractId {
  o String contractId
  --> Supplier supplier
  --> Shipper shipper
  --> Manufacturer manufacturer
  o DateTime arrivalDateTime
  o Double unitPrice
}
  

asset Contract2 identified by contractId {
  o String contractId
  --> Manufacturer manufacturer
  --> Shipper shipper
  --> Distributor distributor
  o DateTime arrivalDateTime
  o Double unitPrice
}

/**
 * A shipment being tracked as an asset on the ledger
 */
asset Shipment identified by shipmentId {
  o String shipmentId
  o String resource
  o ShipmentStatus status
  o Long unitCount
  --> Contract contract
}

  asset Shipment2 identified by shipmentId {
  o String shipmentId
  o String resource
  o ShipmentStatus status
  o Long unitCount
  --> Contract2 contract2
}
/**
 * An abstract transaction that is related to a Shipment
 */
abstract transaction ShipmentTransaction  {
    --> Shipment shipment
}

abstract transaction ShipmentTransaction2 {
    --> Shipment2 shipment2
}
  
event ShipmentHasArrived {
  --> Shipment shipment
}

event ShipmentHasArrived2 {
  --> Shipment2 shipment2
}
/**
 * A notification that a shipment has been received by the
 * Manufacturer and that funds should be transferred from the Manufacturer
 * to the Supplier to pay for the shipment.
 */
transaction ShipmentReceived extends ShipmentTransaction {
}

transaction ShipmentReceived2 extends ShipmentTransaction2 {
}
/**
 * JUST FOR INITIALIZING A DEMO
 */
transaction SetupDemo {
}



